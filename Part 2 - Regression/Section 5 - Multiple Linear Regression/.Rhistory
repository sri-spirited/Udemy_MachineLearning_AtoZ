install.packages(c('caret','data.table'))
install.packages(c('doParallel','DT','e1071','ggplot2','ggthemes','gridExtra','lubridate','mltools','plyr','dplyr','readxl','reshape2','ROCR','scales','shiny','shinydashboard','shinyjs','tidyr','xlsx','zoo','randomForest'))
install.packages(c("doParallel", "DT", "e1071", "ggplot2", "ggthemes", "gridExtra", "lubridate", "mltools", "plyr", "dplyr", "readxl", "reshape2", "ROCR", "scales", "shiny", "shinydashboard", "shinyjs", "tidyr", "xlsx", "zoo", "randomForest"))
shiny::runApp('Z:/2.B2B Pricing Solution/4. Working Folder/Codes/CheesePricingB2BSimulator - Sandbox')
library(rJava)
runApp('Z:/2.B2B Pricing Solution/4. Working Folder/Codes/CheesePricingB2BSimulator - Sandbox')
i = 1
a = c(1,2,3)
paste0(i,a)
paste0(c(i), a)
dmv_final <- read.csv("C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_dmv/dmv_Final.csv")
unique(dmv_final$SalesOrg)
class(dmv_final$SalesOrg)
dmv_final2 <- dmv_final[!dmv_final$SalesOrg==5030,]
dmv_final <- dmv_final[!dmv_final$SalesOrg==5030,]
exclude <- c('6398400','6477100','6250100','6453600','6350600','6380800','6410700','6575800','6436300','6400900','6411100','6135800','651200','6452500','230038','6395700','6446100','6575700','6132200','666948','236207','230028','230013','659329','6575500','669682','6101700','6448600','6391000','821484','659093','230016','653309','653311','653321','659722','661240','661241','653347','6100331','6100487','6100903','6100910','6100926','653348','664707','6100791','653318','653322','6100932','6100913','653314','653306','6100261','6100494','663413','293716','598227','661010','733521','653349','666302','596667','732876','746197','659732','748421','666836','734171','748102','666954','651105','734135','293723','598715','6100904','660285','587788','747459')
names(dmv_final)
dmv_final2 <- dmv_final[!dmv_final$Material %in% exclude,]
dmv_final <- dmv_final[!dmv_final$Material %in% exclude,]
dmv_Final_tillNov_forJanFeb <- dmv_final[!dmv_final$Date %in% c("12/1/2017","1/1/2018","2/1/2018","3/1/2018","4/1/2018"),]
dmv_Final_tillDec_forMar <- dmv_final[!dmv_final$Date %in% c("1/1/2018","2/1/2018","3/1/2018","4/1/2018"),]
dmv_Final_tillJan_forApr <- dmv_final[!dmv_final$Date %in% c("2/1/2018","3/1/2018","4/1/2018"),]
write.csv(dmv_Final_tillNov_forJanFeb, "C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_DMV/dmv_Final_tillNov_forJanFeb.csv", row.names = F)
write.csv(dmv_Final_tillDec_forMar, "C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_DMV/dmv_Final_tillDec_forMar.csv", row.names = F)
write.csv(dmv_Final_tillJan_forApr, "C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_DMV/dmv_Final_tillJan_forApr.csv", row.names = F)
write.csv(dmv_Final, "C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_DMV/dmv_Final.csv", row.names = F)
write.csv(dmv_final, "C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_DMV/dmv_Final.csv", row.names = F)
write.csv(dmv_Final_tillJan_forApr, "C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_DMV/dmv_Final_tillJan_forApr.csv", row.names = F)
# Tom's 6m lag validation exercise
prices <- read.csv("C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Data/DataForTomsComparison.csv")
train <- prices[prices$Date<201107,]
train <- prices[prices$Date<201707,]
test <- prices[prices$Date>201706,]
mod_lag6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6, data=train)
mod_lag6
test$pred <- predict(mod_lag6, newdata = test)
View(test)
View(prices)
View(test)
prices$Date <- paste0("01-",prices$Month,"-",prices$Year)
prices$Date <- as.Date(prices$Date, "%d-%m-%Y")
train <- prices[prices$Date<201707,]
test <- prices[prices$Date>201706,]
train <- prices[prices$Date<'2017-07-01',]
test <- prices[prices$Date>'2017-06-01',]
mod_lag6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6, data=train)
mod_lag6
test$pred <- predict(mod_lag6, newdata = test)
test$APE <- abs(test$Caseinate_EM7_EMEA-test$pred)/test$Caseinate_EM7_EMEA
mean(test$APE)
round(mean(test$APE)*100,2)
test$APE <- round(abs(test$Caseinate_EM7_EMEA-test$pred)*100/test$Caseinate_EM7_EMEA,2)
round(mean(test$APE)*100,2)
round(mean(test$APE),2)
data = read.csv("C:\Users\sridevi.tolety\Documents\1.FrieslandCampina_Miscellanous\Wineglass\2018_06_05_actual_data.csv")
data = read.csv("C:/Users/sridevi.tolety/Documents/1.FrieslandCampina_Miscellanous/Wineglass/2018_06_05_actual_data.csv")
setwd("~/StudyReferences/MachineLearning_AtoZ_Udemy/Part 2 - Regression/Section 5 - Multiple Linear Regression")
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
unique(dataset$State)
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('California', 'Florida', 'New York'),
labels = c(2, 3, 1))
View(dataset)
View(dataset)
# Splitting into test and train set
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
# Feature scaling
regressor = lm(training_set$Profit~., data = training_set)
summary(regressor)
# Only RD Spends are significant
regressor = lm(training_set$Profit~training_set$R.D.Spend, data = training_set)
summary(regressor)
# Predicting test set results
y_pred = predict(regressor, newdata = test_set)
View(test_set)
View(test_set)
# Predicting test set results
test_set$y_pred = predict(regressor, newdata = test_set)
View(test_set)
View(training_set)
# Only RD Spends are significant
regressor = lm($Profit~R.D.Spend, data = training_set)
summary(regressor)
# Only RD Spends are significant
regressor = lm(Profit~R.D.Spend, data = training_set)
summary(regressor)
# Predicting test set results
test_set$y_pred = predict(regressor, newdata = test_set)
coef(summary(regressor))
coef(summary(regressor))[c(2:2),"Pr(>|t|"]
coef(summary(regressor))[c(1:2),"Pr(>|t|"]
coef(summary(regressor))[2,"Pr(>|t|"]
coef(summary(regressor))[1,"Pr(>|t|"]
coef(summary(regressor))["Pr(>|t|"]
str(coef(summary(regressor)))
# Feature scaling
regressor = lm(training_set$Profit~., data = training_set)
coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"]
length(training_set)
numVars = length(training_set)
coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"]
# Building the optimal model usingbackward elimination
backwardElimination <- function(x, sl){
numVars = length(x)
for (i in numVars) {
regressor <- lm(formula = Profit ~., data = x)
maxVar <- max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if(maxVar>sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"]==maxVar)
x = x[,-j]
}
numVars=numVars-1
}
return(summary(regressor))
}
sl = 0.05
backwardElimination(training_set, sl)
# Building the optimal model usingbackward elimination
backwardElimination <- function(x, sl){
numVars = length(x)
for (i in numVars) {
regressor <- lm(formula = Profit ~., data = x)
maxVar <- max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if(maxVar>sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"]==maxVar)
x = x[,-j]
}
numVars=numVars-1
}
return(summary(regressor))
}
sl = 0.05
backwardElimination(training_set, sl)
# Building the optimal model usingbackward elimination
backwardElimination <- function(x, sl){
numVars = length(x)
for (i in numVars) {
regressor <- lm(formula = Profit ~., data = x)
maxVar <- max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if(maxVar>sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"]==maxVar)
x = x[,-j]
}
numVars=numVars-1
}
return(summary(regressor))
}
sl = 0.05
backwardElimination(training_set, sl)
View(training_set)
View(training_set)
# Building the optimal model usingbackward elimination
backwardElimination <- function(x, sl){
numVars = length(x)
for (i in numVars) {
print(i)
regressor <- lm(formula = Profit ~., data = x)
maxVar <- max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if(maxVar>sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"]==maxVar)
print(j)
x = x[,-j]
print(dim(x))
}
numVars=numVars-1
}
return(summary(regressor))
}
sl = 0.05
backwardElimination(training_set, sl)
numVars
# Building the optimal model usingbackward elimination
backwardElimination <- function(x, sl){
for (i in c(1:numVars) {
print(i)
regressor <- lm(formula = Profit ~., data = x)
maxVar <- max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if(maxVar>sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"]==maxVar)
print(j)
x = x[,-j]
print(dim(x))
}
numVars = numVars - 1
}
return(summary(regressor))
}
sl = 0.05
backwardElimination(training_set, sl)
# Building the optimal model usingbackward elimination
backwardElimination <- function(x, sl){
numVars = length(x)
for (i in c(1:numVars)) {
print(i)
regressor <- lm(formula = Profit ~., data = x)
maxVar <- max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if(maxVar>sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"]==maxVar)
print(j)
x = x[,-j]
print(dim(x))
}
numVars = numVars - 1
}
return(summary(regressor))
}
sl = 0.05
backwardElimination(training_set, sl)
