write.csv(dmv_Final_tillDec_forMar, "C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_DMV/dmv_Final_tillDec_forMar.csv", row.names = F)
write.csv(dmv_Final_tillJan_forApr, "C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_DMV/dmv_Final_tillJan_forApr.csv", row.names = F)
write.csv(dmv_Final, "C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_DMV/dmv_Final.csv", row.names = F)
write.csv(dmv_final, "C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_DMV/dmv_Final.csv", row.names = F)
write.csv(dmv_Final_tillJan_forApr, "C:/Users/sridevi.tolety/Documents/9.FC_Demand_Forecasting/4. Working Folder/3.OutputFiles/22May2018_DMV/dmv_Final_tillJan_forApr.csv", row.names = F)
# Tom's 6m lag validation exercise
prices <- read.csv("C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Data/DataForTomsComparison.csv")
train <- prices[prices$Date<201107,]
train <- prices[prices$Date<201707,]
test <- prices[prices$Date>201706,]
mod_lag6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6, data=train)
mod_lag6
test$pred <- predict(mod_lag6, newdata = test)
View(test)
View(prices)
View(test)
prices$Date <- paste0("01-",prices$Month,"-",prices$Year)
prices$Date <- as.Date(prices$Date, "%d-%m-%Y")
train <- prices[prices$Date<201707,]
test <- prices[prices$Date>201706,]
train <- prices[prices$Date<'2017-07-01',]
test <- prices[prices$Date>'2017-06-01',]
mod_lag6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6, data=train)
mod_lag6
test$pred <- predict(mod_lag6, newdata = test)
test$APE <- abs(test$Caseinate_EM7_EMEA-test$pred)/test$Caseinate_EM7_EMEA
mean(test$APE)
round(mean(test$APE)*100,2)
test$APE <- round(abs(test$Caseinate_EM7_EMEA-test$pred)*100/test$Caseinate_EM7_EMEA,2)
round(mean(test$APE)*100,2)
round(mean(test$APE),2)
# Rolling 6 month lag validation
prices <- read.csv("C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Data/DataForTomsComparison.csv")
View(prices)
# Rolling 6 month lag validation
prices <- read.csv("C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Data/DataForTomsComparison.csv")
prices$Date <- paste0("01-",prices$Month,"-",prices$Year)
prices$Date <- as.Date(prices$Date, "%d-%m-%Y")
dateList <-  c('2017-07-01', '2017-08-01', '2017-09-01', '2017-10-01', '2017-11-01') #,'2017-12-01','2018-01-01','2018-02-01','2018-03-01','2018-04-01')
i='2017-07-01'
print(i)
train <- prices[prices$Date<i,]
test <- prices[prices$Date>=i,]
test <- test[1:6,]
View(test)
names(prices)
master_SMP4 <- data.frame()
master_SMP6 <- data.frame()
master <- data.frame()
dateList <-  c('2017-07-01', '2017-08-01', '2017-09-01', '2017-10-01', '2017-11-01') #,'2017-12-01','2018-01-01','2018-02-01','2018-03-01','2018-04-01')
for (i in dateList) {
print(i)
train <- prices[prices$Date<i,]
test <- prices[prices$Date>=i,]
test <- test[1:6,]
mod_SMP4 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag4, data=train)
mod_SMP6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag6, data=train)
test$pred_SMP4 <- predict(mod_SMP4, newdata = test)
test$pred_SMP6 <- predict(mod_SMP6, newdata = test)
test$APE_SMP4 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP4)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP6 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP6)*100/test$Caseinate_EM7_EMEA,2)
test$TestBegin <- paste0(i)
test$MAPE_SMP4 <- paste0(round(mean(test$APE_SMP4),2))
test$MAPE_SMP6 <- paste0(round(mean(test$APE_SMP6),2))
# test$slope <- paste0(mod_lag6$coefficients[2])
# test$intercept <- paste0(mod_lag6$coefficients[1])
master <- rbind(master, test)
}
View(master)
for (i in dateList) {
print(i)
train <- prices[prices$Date<i,]
test <- prices[prices$Date>=i,]
test <- test[1:6,]
mod <- lm(Caseinate_EM7_EMEA ~ PV_i_HCQAct_Lag6, data=train)
mod_SMP4 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag4, data=train)
mod_SMP6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag6, data=train)
test$pred <- predict(mod, newdata = test)
test$pred_SMP4 <- predict(mod_SMP4, newdata = test)
test$pred_SMP6 <- predict(mod_SMP6, newdata = test)
test$APE <- round(abs(test$Caseinate_EM7_EMEA-test$pred)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP4 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP4)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP6 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP6)*100/test$Caseinate_EM7_EMEA,2)
test$TestBegin <- paste0(i)
test$MAPE <- paste0(round(mean(test$APE),2))
test$MAPE_SMP4 <- paste0(round(mean(test$APE_SMP4),2))
test$MAPE_SMP6 <- paste0(round(mean(test$APE_SMP6),2))
# test$slope <- paste0(mod_lag6$coefficients[2])
# test$intercept <- paste0(mod_lag6$coefficients[1])
master <- rbind(master, test)
}
master <- data.frame()
for (i in dateList) {
print(i)
train <- prices[prices$Date<i,]
test <- prices[prices$Date>=i,]
test <- test[1:6,]
mod <- lm(Caseinate_EM7_EMEA ~ PV_i_HCQAct_Lag6, data=train)
mod_SMP4 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag4, data=train)
mod_SMP6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag6, data=train)
test$pred <- predict(mod, newdata = test)
test$pred_SMP4 <- predict(mod_SMP4, newdata = test)
test$pred_SMP6 <- predict(mod_SMP6, newdata = test)
test$APE <- round(abs(test$Caseinate_EM7_EMEA-test$pred)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP4 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP4)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP6 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP6)*100/test$Caseinate_EM7_EMEA,2)
test$TestBegin <- paste0(i)
test$MAPE <- paste0(round(mean(test$APE),2))
test$MAPE_SMP4 <- paste0(round(mean(test$APE_SMP4),2))
test$MAPE_SMP6 <- paste0(round(mean(test$APE_SMP6),2))
# test$slope <- paste0(mod_lag6$coefficients[2])
# test$intercept <- paste0(mod_lag6$coefficients[1])
master <- rbind(master, test)
}
write.csv(master, file='C:/Users/sridevi.tolety/Desktop/temp.csv')
shiny::runApp('2.B2B Pricing Solution/4. Working Folder/Codes/CheesePricingB2BSimulator - Sandbox')
setwd("~/StudyReferences/MachineLearning_AtoZ_Udemy")
dataset = read.csv('C:/Users/sridevi.tolety/StudyReferences/MachineLearning_AtoZ_Udemy/Salary_Data.csv')
dataset = read.csv('C:/Users/sridevi.tolety/Documents/StudyReferences/MachineLearning_AtoZ_Udemy/Salary_Data.csv')
library(caTools)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
regModel = lm(Salary~YearsExperience, data = training_set)
y_pred = predict(regModel, newdata=test_set)
# Visualizing the training set results
library(ggplot2)
ggplot() + geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary), color = 'red')
ggplot() + geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary), color = 'red') +
geom_line(aes(x=training_set$YearsExperience, y = training_set$Salary), color ='blue')
geom_line(aes(x=training_set$YearsExperience, y = predict(regModel, newdata=training_set$YearsExperience), color ='blue')
ggplot() + geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary), color = 'red') +
geom_line(aes(x=training_set$YearsExperience, y = predict(regModel, newdata=training_set$YearsExperience), color ='blue'))
ggplot() + geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary), color = 'red') +
geom_line(aes(x=training_set$YearsExperience, y = predict(regModel, newdata=training_set$YearsExperience), color ='blue'))
ggplot() + geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary), color = 'red') +
geom_line(aes(x=training_set$YearsExperience, y = predict(regModel, newdata=training_set), color ='blue'))
ggplot() + geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary), color = 'red') +
geom_line(aes(x=training_set$YearsExperience, y = predict(regModel, newdata=training_set)), color ='blue')
ggplot() + geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary), color = 'red') +
geom_line(aes(x=training_set$YearsExperience, y = predict(regModel, newdata=training_set)), color ='blue') +
ggtitle('Salary vs Years of Experience') +
xlab('Years of Experience') +
ylab('Salary')
# Rolling 6 month lag validation
prices <- read.csv("C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Data/DataForTomsComparison.csv")
prices$Date <- paste0("01-",prices$Month,"-",prices$Year)
prices$Date <- as.Date(prices$Date, "%d-%m-%Y")
dateList <-  c('2017-07-01', '2017-08-01', '2017-09-01', '2017-10-01', '2017-11-01') #,'2017-12-01','2018-01-01','2018-02-01','2018-03-01','2018-04-01')
master <- data.frame()
for (i in dateList) {
train <- prices[prices$Date<i,]
test <- prices[prices$Date>=i,]
test <- test[1:6,]
mod_lag6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6, data=train)
test$APE <- round(abs(test$Caseinate_EM7_EMEA-test$pred)*100/test$Caseinate_EM7_EMEA,2)
test$TestBegin <- paste0(i)
test$MAPE <- paste0(round(mean(test$APE),2))
master <- rbind(master, test)
test$intercept <- paste0(mod_lag6$coefficients[1])
# Rolling 6 month lag validation WITH SMP LAGS INCLUDED
prices <- read.csv("C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Data/DataForTomsComparison.csv")
test$pred <- predict(mod_lag6, newdata = test)
test$slope <- paste0(mod_lag6$coefficients[2])
# Rolling 6 month lag validation WITH SMP LAGS INCLUDED
prices <- read.csv("C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Data/DataForTomsComparison.csv")
prices$Date <- paste0("01-",prices$Month,"-",prices$Year)
prices$Date <- as.Date(prices$Date, "%d-%m-%Y")
dateList <-  c('2017-07-01', '2017-08-01', '2017-09-01', '2017-10-01', '2017-11-01') #,'2017-12-01','2018-01-01','2018-02-01','2018-03-01','2018-04-01')
master <- data.frame()
for (i in dateList) {
print(i)
train <- prices[prices$Date<i,]
test <- prices[prices$Date>=i,]
test <- test[1:6,]
mod <- lm(Caseinate_EM7_EMEA ~ PV_i_HCQAct_Lag6, data=train)
mod_SMP4 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag4, data=train)
mod_SMP6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag6, data=train)
test$pred <- predict(mod, newdata = test)
test$pred_SMP4 <- predict(mod_SMP4, newdata = test)
test$pred_SMP6 <- predict(mod_SMP6, newdata = test)
test$APE <- round(abs(test$Caseinate_EM7_EMEA-test$pred)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP4 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP4)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP6 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP6)*100/test$Caseinate_EM7_EMEA,2)
test$TestBegin <- paste0(i)
test$MAPE <- paste0(round(mean(test$APE),2))
test$MAPE_SMP4 <- paste0(round(mean(test$APE_SMP4),2))
test$MAPE_SMP6 <- paste0(round(mean(test$APE_SMP6),2))
# test$slope <- paste0(mod_lag6$coefficients[2])
# test$intercept <- paste0(mod_lag6$coefficients[1])
master <- rbind(master, test)
}
ggplot() + geom_curve(aes(x=prices$Date, y=prices$Caseinate_EM7_EMEA), color='black')
ggplot() + geom_curve(aes(x=prices$Date, y=prices$Caseinate_EM7_EMEA), color='black')
?geom_curve
ggplot() + geom_line(aes(x=prices$Date, y=prices$Caseinate_EM7_EMEA), color='black')
i='2017-07-01'
train <- prices[prices$Date<i,]
test <- prices[prices$Date>=i,]
test <- test[1:6,]
mod <- lm(Caseinate_EM7_EMEA ~ PV_i_HCQAct_Lag6, data=train)
mod_SMP4 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag4, data=train)
mod_SMP6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag6, data=train)
test$pred <- predict(mod, newdata = test)
test$pred_SMP4 <- predict(mod_SMP4, newdata = test)
test$pred_SMP6 <- predict(mod_SMP6, newdata = test)
ggplot() + geom_line(aes(x=test$Date, y=test$Caseinate_EM7_EMEA), color='black') +
geom_point(aes(x=test$Date, y=test$pred), color='red') +
geom_point(aes(x=test$Date, y=test$pred_SMP4), color='green') +
geom_point(aes(x=test$Date, y=test$pred_SMP6), color='blue')
ggplot() + geom_line(aes(x=test$Date, y=test$Caseinate_EM7_EMEA), color='black') +
geom_point(aes(x=test$Date, y=test$pred), color='red') +
geom_point(aes(x=test$Date, y=test$pred_SMP4), color='green') +
geom_point(aes(x=test$Date, y=test$pred_SMP6), color='blue') + ggtitle('Test Set Predictions vs Caseinate actuals') + xlab('Month') + ylab('EM7 Caseinate Price')
test <- test[,c('Date','Caseinate_EM7_EMEA','pred','pred_SMP4','pred_SMP6')]
test <- melt(test, id.vars = 'Date')
test
ggplot() + geom_line(aes(x=test$Date[test$variable=='Caseinate_EM7_EMEA',], y=test$variable), color='black') #+
ggplot() + geom_line(aes(x=test$Date[test$variable=='Caseinate_EM7_EMEA',], y=test$variable[test$variable=='Caseinate_EM7_EMEA',]), color='black') #+
test$Preds[!test$variable=='Caseinate_EM7_EMEA',] <- NA
test$Preds[!test$variable=='Caseinate_EM7_EMEA'] <- NA
test$Preds <- test$variable
test$Preds[!test$variable=='Caseinate_EM7_EMEA'] <- NA
ggplot() + geom_line(aes(x=test$Date, y=test$variable), color='black') #+
ggplot() + geom_line(aes(x=test$Date, y=test$value), color='black') #+
ggplot() + geom_line(aes(x=test$Date, y=test$value, color=variable)) #+
ggplot() + geom_line(aes(x=test$Date, y=test$value), color=variable) #+
ggplot() + geom_line(aes(x=test$Date, y=test$value, color=variable)) #+
test
ggplot() + geom_line(aes(x=test$Date, y=test$value, group=Preds, color=variable)) #+
7000*12
summary(mod_SMP4)
mod_SMP4$coefficients
mod_SMP4$coefficients[1]
# Rolling 6 month lag validation WITH SMP LAGS INCLUDED
prices <- read.csv("C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Data/DataForTomsComparison.csv")
prices$Date <- paste0("01-",prices$Month,"-",prices$Year)
prices$Date <- as.Date(prices$Date, "%d-%m-%Y")
dateList <-  c('2017-07-01', '2017-08-01', '2017-09-01', '2017-10-01', '2017-11-01') #,'2017-12-01','2018-01-01','2018-02-01','2018-03-01','2018-04-01')
master <- data.frame()
for (i in dateList) {
print(i)
train <- prices[prices$Date<i,]
test <- prices[prices$Date>=i,]
test <- test[1:6,]
mod <- lm(Caseinate_EM7_EMEA ~ PV_i_HCQAct_Lag6, data=train)
mod_SMP4 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag4, data=train)
mod_SMP6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag6, data=train)
test$pred <- predict(mod, newdata = test)
test$pred_SMP4 <- predict(mod_SMP4, newdata = test)
test$pred_SMP6 <- predict(mod_SMP6, newdata = test)
#Coefficients
test$Mod1_InterceptCoeff <- paste0(round(mod$coefficients[1],2))
test$Mod1_PViCoeff <- paste0(round(mod$coefficients[2],2))
test$Mod2_InterceptCoeff <- paste0(round(mod_SMP4$coefficients[1],2))
test$Mod2_PViCoeff <- paste0(round(mod_SMP4$coefficients[2],2))
test$Mod2_SMP4Coeff <- paste0(round(mod_SMP4$coefficients[3],2))
test$Mod3_InterceptCoeff <- paste0(round(mod_SMP6$coefficients[1],2))
test$Mod3_PViCoeff <- paste0(round(mod_SMP6$coefficients[2],2))
test$Mod3_SMP6Coeff <- paste0(round(mod_SMP6$coefficients[3],2))
test$APE <- round(abs(test$Caseinate_EM7_EMEA-test$pred)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP4 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP4)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP6 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP6)*100/test$Caseinate_EM7_EMEA,2)
test$TestBegin <- paste0(i)
test$MAPE <- paste0(round(mean(test$APE),2))
test$MAPE_SMP4 <- paste0(round(mean(test$APE_SMP4),2))
test$MAPE_SMP6 <- paste0(round(mean(test$APE_SMP6),2))
# test <- test[,c('Date','Caseinate_EM7_EMEA','pred','pred_SMP4','pred_SMP6')]
# test <- melt(test, id.vars = 'Date')
# test$Preds <- test$variable
# test$Preds[!test$variable=='Caseinate_EM7_EMEA'] <- NA
# ggplot() + geom_line(aes(x=test$Date, y=test$value, group=Preds, color=variable)) #+
# geom_point(aes(x=test$Date, y=test$pred), color='red') +
# geom_point(aes(x=test$Date, y=test$pred_SMP4), color='green') +
# geom_point(aes(x=test$Date, y=test$pred_SMP6), color='blue') + ggtitle('Test Set Predictions vs Caseinate actuals') + xlab('Month') + ylab('EM7 Caseinate Price')
# test$slope <- paste0(mod_lag6$coefficients[2])
# test$intercept <- paste0(mod_lag6$coefficients[1])
master <- rbind(master, test)
}
write.csv(master, file='C:/Users/Desktop/temp.csv', row.names = F)
write.csv(master, file='C:/Users/sridevi.tolety/Desktop/temp.csv', row.names = F)
mod$coefficients
mod_SMP4$coefficients
mod_SMP6$coefficients
satellites = read.csv('C:/Users/sridevi.tolety/Documents/3.FC_Strategic_Pricing/4. Working Folder/Satellites/SatellitesModelData.csv')
mod = lm(satellites$SMPExpValue~satellites$Index, data=satellites)
summary(mod)
satellites = read.csv('C:/Users/sridevi.tolety/Documents/3.FC_Strategic_Pricing/4. Working Folder/Satellites/SatellitesModelData.csv')
names(satellites)
mod2 = lm(satellites$WeightedSpends~satellites$Index, data=satellites)
summary(mod)
mod2 = lm(satellites$SMPExpValue~satellites$WeightedSpends, data=satellites)
summary(mod)
summary(mod2)
library(dplyr)
library(readxl)
df_opt_orig <- read.csv(file = 'C:/Users/sridevi.tolety/Documents/2.B2B Pricing Solution/4. Working Folder/Analyses & Insights/Jun2018_Greece_bySteven\outputdatapython.csvoutputdatapython.csv')
df_opt_orig <- read.csv(file = 'C:/Users/sridevi.tolety/Documents/2.B2B Pricing Solution/4. Working Folder/Analyses & Insights/Jun2018_Greece_bySteven/outputdatapython.csv')
cols_to_keep <- c("Austria","Belgium","France","Germany",
"Hungary", "Italy","Poland","Spain",
"Netherlands","UK","Volume","FlgQuotationStatus_Final",
"LengthofContract","CustomerAge","Ingredient_Applications","Repackers",
"PR_greece","STDEVAVG","Quotation_Date",
"TranspCosts_per_Kg",'Greece_price','Quotation_won_ratio')
df_opt <- df_opt_orig[,colnames(df_opt_orig) %in% cols_to_keep]
factor_cols <- c("Austria","Belgium","France","Germany",
"Hungary", "Italy","Poland","Spain",
"Netherlands","UK","FlgQuotationStatus_Final",
"Ingredient_Applications","Repackers")
df_opt[,factor_cols] <- lapply(df_opt[factor_cols], factor)
df_opt$FlgQuotationStatus_Final <- relevel(df_opt$FlgQuotationStatus_Final, ref = "Won")
load('C:/Users/sridevi.tolety/Documents/2.B2B Pricing Solution/4. Working Folder/Analyses & Insights/Jun2018_Greece_bySteven/rf_mod_roc.RData')
PR_trig_tc_range <- seq(from = 0.741, to = 1.3,  by = 0.001)
PR_trig_tc_range <- seq(from = 0.7, to = 1.3,  by = 0.001)
length(PR_trig_tc_range) #351
df_opt$max_revenue <- NA
df_opt$Prob_at_opt_price <- NA
df_opt$Opt_PR <- NA
df_opt$Opt_PR_0.95 <- NA
df_opt$Opt_PR_0.9 <- NA
df_opt$Opt_PR_0.85 <- NA
df_opt$Opt_PR_0.8 <- NA
df_opt$Opt_PR_0.75 <- NA
df_opt$Opt_PR_0.7 <- NA
priceratios <- matrix(unlist(PR_trig_tc_range), ncol = 1, byrow = TRUE)
ExpRevenue1 <- matrix(data=NA, nrow = length(PR_trig_tc_range), ncol = 3)
ExpRevenueMatrix <- cbind(priceratios, ExpRevenue1)
colnames(ExpRevenueMatrix) <- c("priceratio","PrWin","DerivedSP","ExpRevenue")
df_opt$PR_trigona_orig <- df_opt$PR_greece
temp <- cbind(df_opt[1,], ExpRevenueMatrix)
temp$PR_greece <- temp[,"priceratio"]
temp$PrWin <- predict(rfFit, newdata = temp, type = "prob")[,1]
temp$DerivedSP <- (temp$priceratio * temp$Greece_price) + temp$TranspCosts_per_Kg
temp$ExpRevenue <- temp$PrWin *temp$DerivedSP * temp$Volume
df_opt$Opt_PR[1] <- temp$priceratio[temp$ExpRevenue == max(temp$ExpRevenue)]
df_opt$Prob_at_opt_price[1] <- temp$PrWin[temp$ExpRevenue == max(temp$ExpRevenue)]
View(temp)
plot(temp$ExpRevenue)
plot(temp$PR_greece, temp$ExpRevenue)
max(temp$ExpRevenue)
temp$Volume
uniqeu(temp$Volume)*1.31456044
unique(temp$Volume)*1.31456044
max(temp$ExpRevenue)
temp$priceratio[temp$ExpRevenue == max(temp$ExpRevenue)]
temp$PrWin[temp$ExpRevenue == max(temp$ExpRevenue)]
write.csv(temp, file = "C:/Users/sridevi.tolety/Desktop/temp.csv")
View(df_opt)
plot(temp$PR_greece, temp$PrWin)
#Subsetting temp for prob ranges
temp_0.7 <- temp %>% dplyr::filter(PrWin <= 0.7) %>% dplyr::arrange(PrWin)
View(temp_0.7)
temp_0.75 <- temp %>% dplyr::filter(0.7 < PrWin & PrWin <= 0.75) %>% dplyr::arrange(PrWin)
View(temp_0.75)
df_opt$Opt_PR_0.7[i] <- temp_0.7$priceratio[1]
#Subsetting temp for prob ranges
temp_0.7 <- temp %>% dplyr::filter(PrWin <= 0.7) %>% dplyr::arrange(PrWin)
df_opt$Opt_PR_0.7[1] <- temp_0.7$priceratio[1]
View(temp_0.75)
for(i in 1:nrow(df_opt)){
print(i)
temp <- cbind(df_opt[i,], ExpRevenueMatrix)
temp$PR_greece <- temp[,"priceratio"]
temp$PrWin <- predict(rfFit, newdata = temp, type = "prob")[,1]
temp$DerivedSP <- (temp$priceratio * temp$Greece_price) + temp$TranspCosts_per_Kg
temp$ExpRevenue <- temp$PrWin *temp$DerivedSP * temp$Volume
df_opt$Opt_PR[i] <- temp$priceratio[temp$ExpRevenue == max(temp$ExpRevenue)]
df_opt$Prob_at_opt_price[i] <- temp$PrWin[temp$ExpRevenue == max(temp$ExpRevenue)]
#Subsetting temp for prob ranges
temp_0.7 <- temp %>% dplyr::filter(PrWin <= 0.7) %>% dplyr::arrange(PrWin)
temp_0.75 <- temp %>% dplyr::filter(0.7 < PrWin & PrWin <= 0.75) %>% dplyr::arrange(PrWin)
temp_0.8 <- temp %>% dplyr::filter(0.75 < PrWin & PrWin <= 0.8) %>% dplyr::arrange(PrWin)
temp_0.85 <- temp %>% dplyr::filter(0.8 < PrWin & PrWin <= 0.85) %>% dplyr::arrange(PrWin)
temp_0.9 <- temp %>% dplyr::filter(0.85 < PrWin & PrWin <= 0.9) %>% dplyr::arrange(PrWin)
temp_0.95 <- temp %>% dplyr::filter(0.9 < PrWin & PrWin <= 0.95) %>% dplyr::arrange(PrWin)
df_opt$Opt_PR_0.7[i] <- temp_0.7$priceratio[1]
df_opt$Opt_PR_0.75[i] <- temp_0.75$priceratio[1]
df_opt$Opt_PR_0.8[i] <- temp_0.8$priceratio[1]
df_opt$Opt_PR_0.85[i] <- temp_0.85$priceratio[1]
df_opt$Opt_PR_0.9[i] <- temp_0.9$priceratio[1]
df_opt$Opt_PR_0.95[i] <- temp_0.95$priceratio[1]
df_opt$max_revenue[i] <- max(temp$ExpRevenue)
}
# NAs in 0.7
# x <- df_opt
count(is.na(df_opt$Opt_PR_0.7)) # 128
df_opt$Sales_Price <- df_opt_orig$Sales_Price
df_opt$Cheese_Type <- df_opt_orig$Cheese_Type
df_opt$SP_2 <- df_opt$PR_greece*df_opt$Greece_price+df_opt$TranspCosts_per_Kg
df_opt$Length_of_contract <- df_opt_orig$LengthofContract
df_opt$PR_trigona_orig <- NULL
df_opt$Age_of_customer <- df_opt$CustomerAge
df_opt$CustomerAge <- NULL
df_opt$Age_grp <- df_opt_orig$AgeGroup
df_opt$STDEV.AVG <- df_opt$STDEVAVG
df_opt$Customer <- df_opt_orig$Customer
df_opt$STDEVAVG <- NULL
df_opt$Volatility <- df_opt_orig$Volatility
df_opt$PR_trig_TC <- df_opt$SP_2/df_opt$Greece_price
df_opt$The_Netherlands <- df_opt$Netherlands
df_opt$Netherlands <- NULL
df_opt$United_Kingdom <- df_opt$UK
df_opt$UK <- NULL
df_opt$Country <- df_opt_orig$Customer_Country
df_opt$Location <- ifelse(df_opt$Country %in% c("Italy", "France", "Germany", "Austria"), "IFGA", "Other")
df_opt$Rejection_reason_Descr <- df_opt_orig$Rejection_reason_Descr
df_opt$Trigona_Price <- df_opt$trigona
df_opt$trigona <- NULL
df_opt$Application_Segmentation <- ifelse(df_opt_orig$Segment=="Resellers/C&C/Wholesale", "Resellers.C.C.Wholesale
",NA)
df_opt$Application_Segmentation <- ifelse(df_opt_orig$Segment=="Industrial Food Applications","Industrial_Food_Applications", df_opt$Application_Segmentation)
df_opt$Application_Segmentation <- ifelse(df_opt_orig$Segment == "Repackers", "Repackers", df_opt$Application_Segmentation)
df_opt$Application_Segmentation <- ifelse(df_opt_orig$Segment == "Ingredient Applications", "Ingredient_Applications", df_opt$Application_Segmentation)
df_opt$Application_Segmentation <- ifelse(is.na(df_opt$Application_Segmentation), "Other", df_opt$Application_Segmentation)
df_opt$Volume_1000_KG <- ifelse(df_opt$Volume/1000 < 32, "<32", NA)
df_opt$Volume_1000_KG <- ifelse((df_opt$Volume/1000 >= 32) & (df_opt$Volume/1000 < 196), "32-196", df_opt$Volume_1000_KG)
df_opt$Volume_1000_KG <- ifelse(df_opt$Volume/1000 >= 196, ">196", df_opt$Volume_1000_KG)
df_opt$Contract_Length_in_Months <- ifelse(df_opt$Length_of_contract<30, "<1", NA)
df_opt$Contract_Length_in_Months <- ifelse((df_opt$Length_of_contract >= 30) & (df_opt$Length_of_contract < 60), "1-2", df_opt$Contract_Length_in_Months)
df_opt$Contract_Length_in_Months <- ifelse((df_opt$Length_of_contract >= 60) & (df_opt$Length_of_contract < 90), "2-3", df_opt$Contract_Length_in_Months)
df_opt$Contract_Length_in_Months <- ifelse(df_opt$Length_of_contract>=90, ">3", df_opt$Contract_Length_in_Months)
#Adding customer IDs to data
df_custID <- read_excel("QuotationsBD_F.xlsx", sheet=1)
df_custID <- df_custID %>% select(Customer, `Customer ID`) %>% dplyr::distinct(Customer, `Customer ID`) %>% dplyr::rename(Customer_ID = `Customer ID`)
write.csv(df_opt, file = 'C:/Users/sridevi.tolety/Desktop/Preds.csv')
runApp('~/2.B2B Pricing Solution/4. Working Folder/Codes/CheesePricingB2BSimulator - Sandbox')
prices <- read.csv("C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Data/DataForTomsComparison.csv")
prices$Date <- paste0("01-",prices$Month,"-",prices$Year)
prices$Date <- as.Date(prices$Date, "%d-%m-%Y")
master <- data.frame()
for(i in 1:5){
print(i)
train_id <- sample(nrow(prices), size = floor(0.9*nrow(prices)), replace = F)
train <- prices[train,]
test <- prices[-train,]
mod <- lm(Caseinate_EM7_EMEA ~ PV_i_HCQAct_Lag6, data=train)
mod_SMP4 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag4, data=train)
mod_SMP6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag6, data=train)
test$pred <- predict(mod, newdata = test)
test$pred_SMP4 <- predict(mod_SMP4, newdata = test)
test$pred_SMP6 <- predict(mod_SMP6, newdata = test)
#Coefficients
test$Mod1_InterceptCoeff <- paste0(round(mod$coefficients[1],2))
test$Mod1_PViCoeff <- paste0(round(mod$coefficients[2],2))
test$Mod2_InterceptCoeff <- paste0(round(mod_SMP4$coefficients[1],2))
test$Mod2_PViCoeff <- paste0(round(mod_SMP4$coefficients[2],2))
test$Mod2_SMP4Coeff <- paste0(round(mod_SMP4$coefficients[3],2))
test$Mod3_InterceptCoeff <- paste0(round(mod_SMP6$coefficients[1],2))
test$Mod3_PViCoeff <- paste0(round(mod_SMP6$coefficients[2],2))
test$Mod3_SMP6Coeff <- paste0(round(mod_SMP6$coefficients[3],2))
test$APE <- round(abs(test$Caseinate_EM7_EMEA-test$pred)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP4 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP4)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP6 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP6)*100/test$Caseinate_EM7_EMEA,2)
test$fold <- paste0(i)
test$MAPE <- paste0(round(mean(test$APE),2))
test$MAPE_SMP4 <- paste0(round(mean(test$APE_SMP4),2))
test$MAPE_SMP6 <- paste0(round(mean(test$APE_SMP6),2))
master <- rbind(master, test)
}
i=1
train_id <- sample(nrow(prices), size = floor(0.9*nrow(prices)), replace = F)
train <- prices[train,]
train_id
prices[train_id]
prices[train_id,]
prices <- read.csv("C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Data/DataForTomsComparison.csv")
prices$Date <- paste0("01-",prices$Month,"-",prices$Year)
prices$Date <- as.Date(prices$Date, "%d-%m-%Y")
master <- data.frame()
train_id <- sample(nrow(prices), size = floor(0.9*nrow(prices)), replace = F)
train <- prices[train,]
rm(list=)
rm(list=ls())
prices <- read.csv("C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Data/DataForTomsComparison.csv")
prices$Date <- paste0("01-",prices$Month,"-",prices$Year)
prices$Date <- as.Date(prices$Date, "%d-%m-%Y")
master <- data.frame()
for(i in 1:5){
print(i)
train_id <- sample(nrow(prices), size = floor(0.9*nrow(prices)), replace = F)
train <- prices[train_id,]
test <- prices[-train_id,]
mod <- lm(Caseinate_EM7_EMEA ~ PV_i_HCQAct_Lag6, data=train)
mod_SMP4 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag4, data=train)
mod_SMP6 <- lm(Caseinate_EM7_EMEA~PV_i_HCQAct_Lag6+SMP_Lag6, data=train)
test$pred <- predict(mod, newdata = test)
test$pred_SMP4 <- predict(mod_SMP4, newdata = test)
test$pred_SMP6 <- predict(mod_SMP6, newdata = test)
#Coefficients
test$Mod1_InterceptCoeff <- paste0(round(mod$coefficients[1],2))
test$Mod1_PViCoeff <- paste0(round(mod$coefficients[2],2))
test$Mod2_InterceptCoeff <- paste0(round(mod_SMP4$coefficients[1],2))
test$Mod2_PViCoeff <- paste0(round(mod_SMP4$coefficients[2],2))
test$Mod2_SMP4Coeff <- paste0(round(mod_SMP4$coefficients[3],2))
test$Mod3_InterceptCoeff <- paste0(round(mod_SMP6$coefficients[1],2))
test$Mod3_PViCoeff <- paste0(round(mod_SMP6$coefficients[2],2))
test$Mod3_SMP6Coeff <- paste0(round(mod_SMP6$coefficients[3],2))
test$APE <- round(abs(test$Caseinate_EM7_EMEA-test$pred)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP4 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP4)*100/test$Caseinate_EM7_EMEA,2)
test$APE_SMP6 <- round(abs(test$Caseinate_EM7_EMEA-test$pred_SMP6)*100/test$Caseinate_EM7_EMEA,2)
test$fold <- paste0(i)
test$MAPE <- paste0(round(mean(test$APE),2))
test$MAPE_SMP4 <- paste0(round(mean(test$APE_SMP4),2))
test$MAPE_SMP6 <- paste0(round(mean(test$APE_SMP6),2))
master <- rbind(master, test)
}
master
View(master)
write.csv(master, file = "~/11.FC_Caseinate/4. Working Directory/caseinate_SMPLags_fivefoldMAPEs.csv")
write.csv(master, file = "C:/Users/sridevi.tolety/11.FC_Caseinate/4. Working Directory/caseinate_SMPLags_fivefoldMAPEs.csv")
write.csv(master, file = "C:/Users/sridevi.tolety/11.FC_Apollo_Caseinate/4. Working Directory/caseinate_SMPLags_fivefoldMAPEs.csv")
write.csv(master, file = "C:/Users/sridevi.tolety/Documents/11.FC_Apollo_Caseinate/4. Working Directory/Analyses & Insights/caseinate_SMPLags_fivefoldMAPEs.csv")
